// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@teronis-js/event-dispatcher

import { SingleEvent } from "@teronis-js/event-dispatcher";

/**
    * This class can intercept the execution of passed functions. When you pass a function, you get a proxy
    * function in return that intercepts the execution of the function you passed in the first place.
    */
export class HandlerMerger {
        /**
            *
            * @param triggerAtLimit A predetermined length of proxy calls that must proceed to trigger the interception events.
            */
        constructor(triggerAtLimit?: number);
        getPreInterceptionEvent(): SingleEvent;
        getPostInterceptionEvent(): SingleEvent;
        /**
            * Get the amount of proxy function calls that has been done so far.
            */
        getCounter(): number;
        /**
            *
            * @param handler It can only be anonymous, if you pass a name, otherwise an exception will be thrown.
            * @param name When it is passed, it will be preferred over the name of the passed handler.
            */
        mergeWith(handler: Function, name?: string): Function;
        /**
            * The function that has been added previously can be replaced by this method.
            * @param handler It can only be anonymous, if you pass a name, otherwise an exception will be thrown.
            * @param name When it is passed, it will be preferred over the name of the passed handler.
            */
        replaceMerge(handler: Function, name?: string): Function;
        /**
            * If a proxy functions gets called, the counter will be increased.
            * With this function you can simply reset the counter to zero.
            */
        resetCounter(): void;
}

